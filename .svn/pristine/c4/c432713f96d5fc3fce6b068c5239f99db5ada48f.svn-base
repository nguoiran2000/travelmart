'use strict';

var controllers = angular.module('controllers', []);

controllers.controller('MainController', ['$scope', '$location', '$window',
    function ($scope, $location, $window) {
        $scope.loggedIn = function() {
            return Boolean($window.sessionStorage.access_token);
        };

        $scope.isRole = function(user_id) {
            return ($window.sessionStorage.role || $window.sessionStorage.user_id == user_id);
        };

        $scope.logout = function () {
            delete $window.sessionStorage.access_token;
            delete $window.sessionStorage.user_id;
            delete $window.sessionStorage.role;
            $location.path('/login').replace();
        };
    }
]);

controllers.controller('ContactController', ['$scope', '$http', '$window',
    function($scope, $http, $window) {
        $scope.captchaUrl = 'site/captcha';
        $scope.contact = function () {
            $scope.submitted = true;
            $scope.error = {};
            $http.post('api/contact', $scope.contactModel).success(
                function (data) {
                    $scope.contactModel = {};
                    $scope.flash = data.flash;
                    $window.scrollTo(0,0);
                    $scope.submitted = false;
                    $scope.captchaUrl = 'site/captcha' + '?' + new Date().getTime();
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
        };

        $scope.refreshCaptcha = function() {
            $http.get('site/captcha?refresh=1').success(function(data) {
                $scope.captchaUrl = data.url;
            });
        };
    }]);

controllers.controller('DashboardController', ['$scope', '$http',
    function ($scope, $http) {
        $http.get('api/dashboard').success(function (data) {
            
           $scope.dashboard = data;
        })
    }
]);

controllers.controller('LoginController', ['$scope', '$http', '$window', '$location',
    function($scope, $http, $window, $location) {
        $scope.login = function () {
            $scope.submitted = true;
            $scope.error = {};
            $http.post('user/login', $scope.userModel).success(
                function (data) {
                    $window.sessionStorage.access_token = data.access_token;
                    $window.sessionStorage.user_id = data.user_id;
                    $window.sessionStorage.role = data.role;
                    $location.path('dashboard').replace();
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
        };
    }
]);

controllers.controller('RegisterController', ['$scope', '$http', '$window', '$location',
    function($scope, $http, $window, $location) {
        $scope.register = function () {
            $scope.submitted = true;
            $scope.error = {};
            $http.post('user/register', $scope.userModel).success(
                function (data) {
                    $window.sessionStorage.access_token = data.access_token;
                    $window.sessionStorage.user_id = data.user_id;
                    $window.sessionStorage.role = data.role;
                    $location.path(data.returnUrl).replace();
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
        };
    }
]);

// Services Controller

controllers.controller('listCtrl', function ($scope, services) {

    getData();

    function getData() {
        services.getCustomers($scope).then(function(data){
            $scope.activity = [];
            $scope.totalItems = data.data.totalCount;
            $scope.startItem = ($scope.currentPage - 1) * $scope.pageSize + 1;
            $scope.endItem = $scope.currentPage * $scope.pageSize;
            if ($scope.endItem > $scope.totalCount) {$scope.endItem = $scope.totalCount;}
            $scope.customers = data.data.response;
        });
    }

    $scope.pageChanged = function() {
        getData();
    }

    $scope.pageSizeChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.searchTextChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.sort = function(keyname){
        $scope.sortKey = keyname;   //set the sortKey to the param passed
        $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        getData();
    }

    $scope.statusChange = function(id,status){
        services.updateStatus(id,status).then(function(data){

        });
    }

    $scope.statusChanges = function(status){
        angular.forEach($scope.customers, function (data) {
            if(data.selected)
                services.updateStatus(data.customerNumber, status).then(function(data){
                    getData();
                });
        });
        
    }

    $scope.deleteCustomer = function(id) {
        if(confirm("Are you sure to delete customer number: "+id)==true)
            services.deleteCustomer(id).then(function(data){
                getData();
            });
    };

    $scope.deleteCustomers = function() {
        if(confirm("Are you sure to delete customers?")==true)
            angular.forEach($scope.customers, function (data) {
                if(data.selected)
                    services.deleteCustomer(data.customerNumber).then(function(data){
                        getData();
                    });
            });
            
    };

    $scope.countCheck = 0;

    $scope.allNeedsClicked = function () {
        var newValue = !$scope.allNeedsMet();
        angular.forEach($scope.customers, function(data) {
            data.selected = newValue;
        });
    };

    $scope.allNeedsMet = function () {
        if($scope.customers) {
            $scope.countCheck = 0;
            angular.forEach($scope.customers, function (data) {
                $scope.countCheck += (data.selected ? 1 : 0);
            });
            return ($scope.countCheck === $scope.customers.length);
        }
        return false;
    };

    $scope.selectRow = function(data) {
        data.selected = !data.selected;
    };
});

controllers.controller('editCtrl', function ($scope, $rootScope, $location, $stateParams, services, customer, Slug, FileUploader) {
    var customerID = ($stateParams.customerID) ? parseInt($stateParams.customerID) : 0;
    $rootScope.title = (customerID > 0) ? 'Edit Customer' : 'Add Customer';
    $scope.buttonText = (customerID > 0) ? 'Update Customer' : 'Add New Customer';
      var original = customer.data;
      original._id = customerID;
      $scope.customer = angular.copy(original);
      $scope.customer._id = customerID;

      $scope.isClean = function() {
        return angular.equals(original, $scope.customer);
      }

      $scope.deleteCustomer = function(customer) {
        if(confirm("Are you sure to delete customer number: "+$scope.customer._id)==true)
            services.deleteCustomer(customer.customerNumber);
        $location.path('/services');
      };

      var old_file = $scope.customer.image;

      $scope.saveCustomer = function(customer) {
        if (customerID <= 0) {
            services.insertCustomer(customer);
        }
        else {
            services.updateCustomer(customerID, customer);
        }
        $location.path('/services');
    };



    $scope.options = {
        height: 200,
            popover: {
              image: [
                ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                ['float', ['floatLeft', 'floatRight', 'floatNone']],
                ['remove', ['removeMedia']]
              ],
              link: [
                ['link', ['linkDialogShow', 'unlink']]
              ],
              air: [
                ['color', ['color']],
                ['font', ['bold', 'underline', 'clear']],
                ['para', ['ul', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture']]
              ]
            }
          };
    $scope.slugify = function() {
        if(customerID <= 0)
            $scope.customer.slug = Slug.slugify($scope.customer.customerName);
    };

    var uploader = $scope.uploader = new FileUploader();

    uploader.filters.push({
        name: 'imageFilter',
        fn: function(item /*{File|FileLikeObject}*/, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };

    uploader.onAfterAddingFile = function(fileItem) {
        $scope.customer.image = fileItem._file;
        console.log($scope.customer.image);
        //console.info('onAfterAddingFile', fileItem);
    };

});

// Blog Controller

controllers.controller('listCtrlBlog', function ($scope, adminBlog, adminBlogs) {
    
    pushData(adminBlogs);

    function getData() {
        adminBlog.getBlogs($scope).then(function(data){
            pushData(data);
        });
    }

    function pushData(data) {
        $scope.activity = [];
        $scope.totalItems = data.data.totalCount;
        $scope.startItem = ($scope.currentPage - 1) * $scope.pageSize + 1;
        $scope.endItem = $scope.currentPage * $scope.pageSize;
        if ($scope.endItem > $scope.totalCount) {$scope.endItem = $scope.totalCount;}
        $scope.blogs = data.data.response;
        $scope.categories = data.data.categories;
    }

    $scope.pageChanged = function() {
        getData();
    }

    $scope.pageSizeChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.searchTextChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.sort = function(keyname){
        $scope.sortKey = keyname;   //set the sortKey to the param passed
        $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        getData();
    }

    $scope.statusChange = function(id,status){
        adminBlog.updateStatus(id,status).then(function(data){

        });
    }

    $scope.statusChanges = function(status){
        angular.forEach($scope.blogs, function (data) {
            if(data.selected)
                adminBlog.updateStatus(data.id, status).then(function(data){
                    getData();
                });
        });
    }

    $scope.deleteBlog = function(id) {
        if(confirm("Are you sure to delete blog number: "+id)==true)
            adminBlog.deleteBlog(id).then(function(data){
                getData();
            });
    };

    $scope.deleteBlogs = function() {
        if(confirm("Are you sure to delete blogs?")==true)
            angular.forEach($scope.blogs, function (data) {
                if(data.selected)
                    adminBlog.deleteBlog(data.id).then(function(data){
                        getData();
                    });
            });
            
    };

    $scope.countCheck = 0;

    $scope.allNeedsClicked = function () {
        var newValue = !$scope.allNeedsMet();
        angular.forEach($scope.blogs, function(data) {
            data.selected = newValue;
        });
    };

    $scope.allNeedsMet = function () {
        if($scope.blogs) {
            $scope.countCheck = 0;
            angular.forEach($scope.blogs, function (data) {
                $scope.countCheck += (data.selected ? 1 : 0);
            });
            return ($scope.countCheck === $scope.blogs.length);
        }
        return false;
    };

    $scope.selectRow = function(data) {
        data.selected = !data.selected;
    };
});

controllers.controller('editCtrlBlog', function ($scope, $rootScope, $location, $stateParams, adminBlog, blog, Slug, FileUploader) {
    
    var blogID = ($stateParams.blogID) ? parseInt($stateParams.blogID) : 0;
    $rootScope.title = (blogID > 0) ? 'Edit Blog' : 'Add Blog';
    var original = blog;
    if(typeof original == 'undefined')
        original = [];
    original._id = blogID;
    $scope.blog = angular.copy(original);

    $scope.blog._id = blogID;
    $scope.error = {};

      $scope.isClean = function() {
        return angular.equals(original, $scope.blog);
      }

      $scope.deleteBlog = function(blog) {
        if(confirm("Are you sure to delete blog number: "+$scope.blog._id)==true)
            adminBlog.deleteBlog(blog.id);
        $location.path('/admin-blog');
      };

      var old_file = $scope.blog.image;

      $scope.saveBlog = function(blog, status) {
        blog.status = status;
        if (blogID <= 0) {
            adminBlog.insertBlog(blog, $scope, $location);
        }
        else {
            adminBlog.updateBlog(blogID, blog, $scope, $location);
        }
        
    };



    $scope.options = {
        height: 200,
            popover: {
              image: [
                ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                ['float', ['floatLeft', 'floatRight', 'floatNone']],
                ['remove', ['removeMedia']]
              ],
              link: [
                ['link', ['linkDialogShow', 'unlink']]
              ],
              air: [
                ['color', ['color']],
                ['font', ['bold', 'underline', 'clear']],
                ['para', ['ul', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture']]
              ]
            }
          };
    $scope.slugify = function(value) {
        if(blogID <= 0)
            $scope.blog.slug = Slug.slugify($scope.blog.title);
    };

    var uploader = $scope.uploader = new FileUploader();

    uploader.filters.push({
        name: 'imageFilter',
        fn: function(item, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function(item, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };

    uploader.onAfterAddingFile = function(fileItem) {
        $scope.blog.image = fileItem._file;
    };

});

controllers.controller('viewCtrlBlog', function ($scope, $window, $routeParams, blog, $timeout, Comment, $http, $location, $anchorScroll) {

    var blogSlug = ($routeParams.blogSlug) ? $routeParams.blogSlug : '';
    var original = blog.data;
    original._slug = blogSlug;
    $scope.blog = angular.copy(original);
    $scope.blog._slug = blogSlug;
    $scope.error = {};

    var width = $window.innerWidth;
    if(width > 900) {
       // desktop
       rebuildSlide(4);
    } else if(width <= 900 && width > 480) {
       // tablet
       rebuildSlide(2);
    } else {
       // phone
       rebuildSlide(1);
    }

    function rebuildSlide(n) {
       var imageCollection = [],
           slide = [],
           index;
       // $scope.blog.newsRelated is your actual data collection.
       for(index = 0; index < $scope.blog.newsRelated.length; index++) {
           if(slide.length === n) {
               imageCollection.push(slide);
               slide = [];
           }
           slide.push($scope.blog.newsRelated[index]);
       }
       imageCollection.push(slide);
       $scope.imageCollection = imageCollection;
       $scope.imageCol = 12 / n;
    }

    $scope.commentData = {};
    $scope.inputReply = {};

    // loading variable to show the spinning loading icon
    $scope.loading = true;
    
    // get all the comments first and bind it to the $scope.comments object
    Comment.get($scope.blog.id)
        .success(function(data) {
            $scope.comments = data;
            $scope.loading = false;
        });

    // function to handle submitting the form
    $scope.submitComment = function(comment_id) {
        //$scope.loading = true;

        // save the comment. pass in comment data from the form
        Comment.save($scope.commentData[comment_id])
            .success(function(data) {
                $scope.commentData = {};
                // if successful, we'll need to refresh the comment list
                Comment.get($scope.blog.id)
                    .success(function(getData) {
                        $scope.comments = getData;
                        //$scope.loading = false;
                    });

            })
            .error(function(data) {
                console.log(data);
            });
    };

    // function to handle deleting a comment
    $scope.deleteComment = function(id) {
        //$scope.loading = true; 

        Comment.destroy(id)
            .success(function(data) {

                // if successful, we'll need to refresh the comment list
                Comment.get($scope.blog.id)
                    .success(function(getData) {
                        $scope.comments = getData;
                        //$scope.loading = false;
                    });

            });
    };

    $scope.like = function(post_id) {
        $scope.liketing = true;
        $http.get('/like/like?post_id=' + post_id).success(function(data) {
            Comment.get($scope.blog.id)
                    .success(function(getData) {
                        $scope.comments = getData;
                        $scope.liketing = false;
                    });
            });
    };

    $scope.likeBlog = function(post_id) {
        $scope.liketing = true;
        $http.get('/like/like?post_id=' + post_id).success(function(data) {
                $scope.blog.likes = data;
                $scope.liketing = false;
            });
    };

    $scope.checkLike = function(likes) {
        var text_like = 'Like';
        if($window.sessionStorage.user_id) {
            var user_id = $window.sessionStorage.user_id;
            angular.forEach(likes, function (data) {
                if(parseInt(data.meta_value) == user_id)
                    text_like = 'UnLike';
            });
        }
        return text_like;
    };

    $scope.limit = 5;

    $scope.loadMore = function() {
        var increamented = $scope.limit + 3;
        $scope.limit = increamented > $scope.comments.length ? $scope.comments.length : increamented;
    };

    $scope.scrollTo = function(id) {
        $location.hash(id);
        $anchorScroll();
    }

});

// Tag Controller

controllers.controller('listCtrlTag', function ($scope, adminTag) {

    getData();

    function getData() {
        adminTag.getTags($scope).then(function(data){
            $scope.activity = [];
            $scope.totalItems = data.data.totalCount;
            $scope.startItem = ($scope.currentPage - 1) * $scope.pageSize + 1;
            $scope.endItem = $scope.currentPage * $scope.pageSize;
            if ($scope.endItem > $scope.totalCount) {$scope.endItem = $scope.totalCount;}
            $scope.tags = data.data.response;
            $scope.categories = data.data.categories;
        });
    }

    $scope.pageChanged = function() {
        getData();
    }

    $scope.pageSizeChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.searchTextChanged = function() {
        $scope.currentPage = 1;
        getData();
    }

    $scope.sort = function(keyname){
        $scope.sortKey = keyname;   //set the sortKey to the param passed
        $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        getData();
    }

    $scope.statusChange = function(id,status){
        adminTag.updateStatus(id,status).then(function(data){

        });
    }

    $scope.statusChanges = function(status){
        angular.forEach($scope.tags, function (data) {
            if(data.selected)
                adminTag.updateStatus(data.id, status).then(function(data){
                    getData();
                });
        });
    }

    $scope.deleteTag = function(id) {
        if(confirm("Are you sure to delete tag number: "+id)==true)
            adminTag.deleteTag(id).then(function(data){
                getData();
            });
    };

    $scope.deleteTags = function() {
        if(confirm("Are you sure to delete tags?")==true)
            angular.forEach($scope.tags, function (data) {
                if(data.selected)
                    adminTag.deleteTag(data.id).then(function(data){
                        getData();
                    });
            });
            
    };

    $scope.countCheck = 0;

    $scope.allNeedsClicked = function () {
        var newValue = !$scope.allNeedsMet();
        angular.forEach($scope.tags, function(data) {
            data.selected = newValue;
        });
    };

    $scope.allNeedsMet = function () {
        if($scope.tags) {
            $scope.countCheck = 0;
            angular.forEach($scope.tags, function (data) {
                $scope.countCheck += (data.selected ? 1 : 0);
            });
            return ($scope.countCheck === $scope.tags.length);
        }
        return false;
    };

    $scope.selectRow = function(data) {
        data.selected = !data.selected;
    };
});

controllers.controller('editCtrlTag', function ($scope, $rootScope, $location, $routeParams, adminTag, tag, Slug, FileUploader) {
    
    var tagID = ($routeParams.tagID) ? parseInt($routeParams.tagID) : 0;
    $rootScope.title = (tagID > 0) ? 'Edit Tag' : 'Add Tag';
    var original = tag.data;
    original._id = tagID;
    $scope.tag = angular.copy(original);
    $scope.tag._id = tagID;
    $scope.error = {};

      $scope.isClean = function() {
        return angular.equals(original, $scope.tag);
      }

      $scope.deleteTag = function(tag) {
        if(confirm("Are you sure to delete tag number: "+$scope.tag._id)==true)
            adminTag.deleteTag(tag.id);
        $location.path('/admin-tag');
      };

      var old_file = $scope.tag.image;

      $scope.saveTag = function(tag, status) {
        tag.status = status;
        if (tagID <= 0) {
            adminTag.insertTag(tag, $scope, $location);
        }
        else {
            adminTag.updateTag(tagID, tag);
        }
        
    };



    $scope.options = {
        height: 200,
            popover: {
              image: [
                ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],
                ['float', ['floatLeft', 'floatRight', 'floatNone']],
                ['remove', ['removeMedia']]
              ],
              link: [
                ['link', ['linkDialogShow', 'unlink']]
              ],
              air: [
                ['color', ['color']],
                ['font', ['bold', 'underline', 'clear']],
                ['para', ['ul', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture']]
              ]
            }
          };
    $scope.slugify = function(value) {
        if(tagID <= 0)
            $scope.tag.slug = Slug.slugify($scope.tag.title);
    };

    var uploader = $scope.uploader = new FileUploader();

    uploader.filters.push({
        name: 'imageFilter',
        fn: function(item, options) {
            var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    });

    // CALLBACKS

    uploader.onWhenAddingFileFailed = function(item, filter, options) {
        console.info('onWhenAddingFileFailed', item, filter, options);
    };

    uploader.onAfterAddingFile = function(fileItem) {
        $scope.tag.image = fileItem._file;
    };

});

controllers.controller('editCtrlEmployer', function ($scope) {
    // we will store all of our form data in this object
    $scope.formData = {};
    
    // function to process the form
    $scope.processForm = function() {
        alert('awesome!');  
    };
});