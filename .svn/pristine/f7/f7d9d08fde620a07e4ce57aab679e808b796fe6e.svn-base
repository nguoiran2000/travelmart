'use strict';

var app = angular.module('app', [
    'ngRoute',          //$routeProvider
    'mgcrea.ngStrap',   //bs-navbar, data-match-route directives
    'controllers',       //Our module frontend/web/js/controllers.js
    'ui.bootstrap',
    'summernote',
    'slugifier',
    'angularFileUpload',
    'ui.select2',
    'ngAnimate',
    'ngSanitize',
    'ui.router',
    'ngMaterial'
]);

app.config(['$httpProvider', '$locationProvider', '$stateProvider', '$urlRouterProvider',
    function($httpProvider, $locationProvider, $stateProvider, $urlRouterProvider) {
        $httpProvider.interceptors.push('authInterceptor');
        $locationProvider.html5Mode({
          enabled: true,
          requireBase: false
        });

        $stateProvider.
        // route to show our basic form (/form)
        state('home', {
            url: '/',
            templateUrl: '/partials/index.html'
        }).
        state('about', {
            url: '/about',
            templateUrl: '/partials/about.html'
        }).
        state('contact', {
            url: '/contact',
            templateUrl: '/partials/contact.html',
            controller: 'ContactController'
        }).
        state('login', {
            url: '/login',
            templateUrl: '/partials/login.html',
            controller: 'LoginController'
        }).
        state('register', {
            url: '/register',
            templateUrl: '/partials/register.html',
            controller: 'RegisterController'
        }).
        state('dashboard', {
            url: '/dashboard',
            templateUrl: '/partials/dashboard.html',
            controller: 'DashboardController'
        }).
        state('services', {
            url: '/services',
            title: 'Customers',
            templateUrl: '/partials/services/customers.html',
            controller: 'listCtrl'
        }).
        state('services.editCustomer', {
            url: '/edit-customer/:customerID',
            title: 'Edit Customers',
            templateUrl: '/partials/services/edit-customer.html',
            controller: 'editCtrl',
            
        }).
        state('adminBlog', {
            url: '/admin-blog',
            title: 'Blog',
            templateUrl: '/partials/blog/index.html',
            controller: 'listCtrlBlog',
            resolve: {
                adminBlogs: function(adminBlog) {
                    return adminBlog.getBlogs();
                }
            }
        }).
        state('adminBlog.edit', {
            url: '/{blogID}',
            title: 'Edit Blog',
            templateUrl: '/partials/blog/edit-blog.html',
            controller: 'editCtrlBlog',
            resolve: {
                blog: function($stateParams, adminBlogs) {
                    var data = adminBlogs.data.response;
                    return data.find(function(blog) { 
                        return blog.id == $stateParams.blogID;
                    });
                }
            }
        }).
        state('blogViews', {
            url: '/blog/{blogSlug}',
            title: 'View Blog',
            templateUrl: '/partials/blog/view-blog.html',
            controller: 'viewCtrlBlog',
            resolve: {
                blog: function(adminBlog, $stateParams){
                    var blogSlug = $stateParams.blogSlug;
                    return adminBlog.getBlogSlug(blogSlug);
                }
            }
        }).
        state('adminTag', {
            url: '/admin-tag',
            title: 'Tag',
            templateUrl: '/partials/tag/index.html',
            controller: 'listCtrlTag'
        }).
        state('adminTag.editTag', {
            url: '/admin-tag/edit-tag/:tagID',
            title: 'Edit Tag',
            templateUrl: '/partials/tag/edit-tag.html',
            controller: 'editCtrlTag',
            resolve: {
                tag: function(adminTag, $stateParams){
                    var tagID = $stateParams.tagID;
                    return adminTag.getTag(tagID);
                }
            }
        }).
        //Employer
        state('adminEmployer', {
            url: '/admin-employer',
            title: 'Employer',
            templateUrl: '/partials/employer/index.html',
            controller: 'listCtrlEmployer',
            resolve: {
                adminEmployers: function(employers) {
                    return employers.getEmployers();
                }
            }
        }).
        state('adminEmployer.edit', {
            url: '/{employerID}',
            title: 'Edit Employer',
            templateUrl: '/partials/employer/edit-employer.html',
            controller: 'editCtrlEmployer',
            resolve: {
                employer: function($stateParams, adminEmployers) {
                    var data = adminEmployers.data.response;
                    return data.find(function(employer) { 
                        return employer.id == $stateParams.employerID;
                    });
                }
            }
        }).
        state('employerViews', {
            url: '/employer/{employerSlug}',
            title: 'View Employer',
            templateUrl: '/partials/employer/view-employer.html',
            controller: 'viewCtrlEmployer',
            resolve: {
                employer: function($stateParams, employers){
                    var employerSlug = $stateParams.employerSlug;
                    return employers.getEmployerSlug(employerSlug);
                }
            }
        }).
        state('employer', {
            url: '/employer/create',
            title: 'Employer',
            templateUrl: '/partials/employer/form.html',
            controller: 'editCtrlEmployer'
        })
        // nested states 
        // each of these sections will have their own view
        // url will be nested (/form/profile)
        .state('employer.profile', {
            url: '/profile',
            templateUrl: '/partials/employer/form-profile.html'
        })
        
        // url will be /form/interests
        .state('employer.interests', {
            url: '/interests',
            templateUrl: '/partials/employer/form-interests.html'
        })
        
        // url will be /form/payment
        .state('employer.payment', {
            url: '/payment',
            templateUrl: '/partials/employer/form-payment.html'
        });
        $urlRouterProvider.otherwise('/partials/404.html');
    }
]);

app.factory('authInterceptor', function ($q, $window, $location) {
    return {
        request: function (config) {
            if ($window.sessionStorage.access_token) {
                //HttpBearerAuth
                config.headers.Authorization = 'Bearer ' + $window.sessionStorage.access_token;
            }
            return config;
        },
        responseError: function (rejection) {
            if (rejection.status === 401) {
                $location.path('/login').replace();
            }
            return $q.reject(rejection);
        }
    };
});

app.factory("services", ['$http', function($http) {
  var serviceBase = '/api/'
    var obj = {};
    obj.getCustomers = function($scope){
        return $http.get(serviceBase + 'customers', {
                params: {
                    page: $scope.currentPage,
                    size: $scope.pageSize,
                    search: $scope.searchText,
                    searchKey: $scope.searchKey,
                    sortKey: $scope.sortKey,
                    reverse: $scope.reverse,
                } 
            }
        );
    }
    obj.getCustomer = function(customerID){
        return $http.get(serviceBase + 'customer?id=' + customerID);
    }

    obj.insertCustomer = function (data) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        return $http.post(serviceBase + 'insert-customer', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).then(function (status) {
                return status.data;
            });
    };

    obj.updateCustomer = function (id, data) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        fd.append('id', id);
        return $http.post(serviceBase + 'update-customer', fd, {
                  transformRequest: angular.identity,
                  headers: {'Content-Type': undefined}
               }).then(function (status) {
            return status.data;
        });
    };

    obj.updateStatus = function (id,status) {
        return $http.post(serviceBase + 'status-customer', {id:id, status:status}).then(function (status) {
            return status.data;
        });
    };

    obj.deleteCustomer = function (id) {
        return $http.delete(serviceBase + 'delete-customer?id=' + id).then(function (status) {
            return status.data;
        });
    };

    return obj;   
}]);

app.factory("adminBlog", ['$http', '$rootScope', function($http, $rootScope) {
  var blogBase = '/blog/'
    var obj = {};
    obj.getBlogs = function($scope = $rootScope) {
        return $http.get(blogBase + 'admin-blogs', {
                params: {
                    page: $scope.currentPage,
                    size: $scope.pageSize,
                    search: $scope.searchText,
                    searchKey: $scope.searchKey,
                    sortKey: $scope.sortKey,
                    reverse: $scope.reverse,
                } 
            }
        );
    }

    obj.getBlog = function(blogID){
        return $http.get(blogBase + 'admin-blog?id=' + blogID);
    }

    obj.getBlogSlug = function(blogSlug){
        return $http.get(blogBase + 'blog?slug=' + blogSlug);
    }

    obj.insertBlog = function (data, $scope, $location) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        return $http.post(blogBase + 'insert-blog', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).success(
                function (data) {
                    $location.path('/admin-blog');
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
    };

    obj.updateBlog = function (id, data, $scope, $location) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        fd.append('id', id);
        return $http.post(blogBase + 'update-blog', fd, {
                  transformRequest: angular.identity,
                  headers: {'Content-Type': undefined}
               }).success(
                function (data) {
                    $location.path('/admin-blog');
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
    };

    obj.updateStatus = function (id,status) {
        return $http.post(blogBase + 'status-blog', {id:id, status:status}).then(function (status) {
            return status.data;
        });
    };

    obj.deleteBlog = function (id) {
        return $http.delete(blogBase + 'delete-blog?id=' + id).then(function (status) {
            return status.data;
        });
    };

    return obj;   
}]);

app.factory("adminTag", ['$http', function($http) {
  var tagBase = '/tag/'
    var obj = {};
    obj.getTags = function($scope){
        return $http.get(tagBase + 'admin-tags', {
                params: {
                    page: $scope.currentPage,
                    size: $scope.pageSize,
                    search: $scope.searchText,
                    searchKey: $scope.searchKey,
                    sortKey: $scope.sortKey,
                    reverse: $scope.reverse,
                } 
            }
        );
    }
    obj.getTag = function(tagID){
        return $http.get(tagBase + 'admin-tag?id=' + tagID);
    }

    obj.insertTag = function (data, $scope, $location) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        return $http.post(tagBase + 'insert-tag', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).success(
                function (data) {
                    $location.path('/admin-tag');
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
    };

    obj.updateTag = function (id, data) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        fd.append('id', id);
        return $http.post(tagBase + 'update-tag', fd, {
                  transformRequest: angular.identity,
                  headers: {'Content-Type': undefined}
               }).then(function (status) {
            return status.data;
        });
    };

    obj.updateStatus = function (id,status) {
        return $http.post(tagBase + 'status-tag', {id:id, status:status}).then(function (status) {
            return status.data;
        });
    };

    obj.deleteTag = function (id) {
        return $http.delete(tagBase + 'delete-tag?id=' + id).then(function (status) {
            return status.data;
        });
    };

    return obj;   
}]);

app.factory("employers", ['$http', '$rootScope', function($http, $rootScope) {
  var employerBase = '/employer/'
    var obj = {};
    obj.getEmployers = function($scope = $rootScope) {
        return $http.get(employerBase + 'admin-employers', {
                params: {
                    page: $scope.currentPage,
                    size: $scope.pageSize,
                    search: $scope.searchText,
                    searchKey: $scope.searchKey,
                    sortKey: $scope.sortKey,
                    reverse: $scope.reverse,
                } 
            }
        );
    }
    obj.getEmployer = function(employerID){
        return $http.get(employerBase + 'admin-employer?id=' + employerID);
    }

    obj.getEmployerSlug = function(employerSlug){
        return $http.get(employerBase + 'employer?slug=' + employerSlug);
    }

    obj.insertEmployer = function (data, $scope, $location) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        return $http.post(employerBase + 'insert-employer', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).success(
                function (data) {
                    $location.path('/admin-employer');
            }).error(
                function (data) {
                    angular.forEach(data, function (error) {
                        $scope.error[error.field] = error.message;
                    });
                }
            );
    };

    obj.updateEmployer = function (id, data) {
        var fd = new FormData();
        angular.forEach(data, function (value, key) {
            fd.append(key, value);
        });
        fd.append('id', id);
        return $http.post(employerBase + 'update-employer', fd, {
                  transformRequest: angular.identity,
                  headers: {'Content-Type': undefined}
               }).then(function (status) {
            return status.data;
        });
    };

    obj.updateStatus = function (id,status) {
        return $http.post(employerBase + 'status-employer', {id:id, status:status}).then(function (status) {
            return status.data;
        });
    };

    obj.deleteEmployer = function (id) {
        return $http.delete(employerBase + 'delete-employer?id=' + id).then(function (status) {
            return status.data;
        });
    };

    return obj;   
}]);

app.factory('Comment', function($http) {
    return {
        get : function(blog_id) {
            return $http.get('/comment/comments?blog_id=' + blog_id);
        },
        show : function(id) {
            return $http.get('/comment/comment?id=' + id);
        },
        save : function(commentData) {
            return $http({
                method: 'POST',
                url: '/comment/insert-comment',
                headers: { 'Content-Type' : 'application/x-www-form-urlencoded' },
                data: $.param(commentData)
            });
        },
        destroy : function(id) {
            return $http.delete('/comment/delete-comment?id=' + id);
        }
    }
});

app.run(['$location', '$rootScope', function($location, $rootScope) {
    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
        $rootScope.title = toState.title;

        // Start phân trang chung 
        $rootScope.currentPage = 1;
        //$rootScope.totalItems = 0;
        $rootScope.pageSize = 10;
        $rootScope.searchText = '';
        $rootScope.sortKey = '';
        $rootScope.reverse = true;
        $rootScope.options = [{
            name: '10',
            value: 10
        }, {
            name: '25',
            value: 25
        }, {
            name: '50',
            value: 50
        }, {
            name: '100',
            value: 100
        }];
        // End phân trang chung
    });
}]);


app.directive('ngThumb', ['$window', function($window) {
    var helper = {
        support: !!($window.FileReader && $window.CanvasRenderingContext2D),
        isFile: function(item) {
            return angular.isObject(item) && item instanceof $window.File;
        },
        isImage: function(file) {
            var type =  '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
            return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
        }
    };

    return {
        restrict: 'A',
        template: '<canvas/>',
        link: function(scope, element, attributes) {
            if (!helper.support) return;

            var params = scope.$eval(attributes.ngThumb);

            if (!helper.isFile(params.file)) return;
            if (!helper.isImage(params.file)) return;

            var canvas = element.find('canvas');
            var reader = new FileReader();

            reader.onload = onLoadFile;
            reader.readAsDataURL(params.file);

            function onLoadFile(event) {
                var img = new Image();
                img.onload = onLoadImage;
                img.src = event.target.result;
            }

            function onLoadImage() {
                var width = params.width || this.width / this.height * params.height;
                var height = params.height || this.height / this.width * params.width;
                canvas.attr({ width: width, height: height });
                canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);
            }
        }
    };
}]);

app.directive('bgImage', function ($window, $timeout) {
    return function (scope, element, attrs) {
        var resizeBG = function () {
            var bgwidth = element.width();
            var bgheight = element.height();

            var winwidth = element.parent().width();
            var winheight = element.parent().height();

            var widthratio = winwidth / bgwidth;
            var heightratio = winheight / bgheight;

            var widthdiff = heightratio * bgwidth;
            var heightdiff = widthratio * bgheight;

            if (heightdiff > winheight) {
                element.css({
                    width: winwidth + 'px',
                    height: heightdiff + 'px'
                });
            } else {
                element.css({
                    width: widthdiff + 'px',
                    height: winheight + 'px'
                });
            }
        };

        var windowElement = angular.element($window);
        windowElement.resize(resizeBG);

        element.bind('load', function () {
            resizeBG();
        });
    }
});

app.directive('checkImage', function($http) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            attrs.$observe('ngSrc', function(ngSrc) {
                $http.get(ngSrc).success(function(){
                }).error(function(){
                    element.attr('src', '/images/profile_placeholder.png'); // set default image
                });
            });
        }
    };
});

// On esc event
app.directive('onEsc', function() {
    return function(scope, elm, attr) {
        elm.bind('keydown', function(e) {
            if (e.keyCode === 27) {
                scope.$apply(attr.onEsc);
            }
        });
    };
});

// On enter event
app.directive('onEnter', function() {
    return function(scope, elm, attr) {
        elm.bind('keypress', function(e) {
            if (e.keyCode === 13) {
                //scope.$apply(attr.onEnter);
            }
        });
    };
});

// Inline edit directive
app.directive('inlineEdit', function($timeout) {
    return {
        scope: {
            model: '=inlineEdit',
            type: '@inlineType',
            handleSave: '&onSave',
            handleCancel: '&onCancel'
        },
        link: function(scope, elm, attr) {
            scope.options = {
                height: 200,
                focus: true,
                toolbar: [
                      ['style', ['bold', 'italic', 'underline', 'clear']],
                      ['color', ['color']],
                      ['para', ['ul', 'ol', 'paragraph']],
                      ['height', ['height']]
                    ]
            };
            var previousValue;
            scope.edit = function() {
                scope.editMode = true;
                previousValue = scope.model;
                $timeout(function() {
                    elm.find(scope.type)[0].focus();
                }, 0, false);
            };
            scope.save = function() {
                scope.editMode = false;
                scope.handleSave({value: scope.model});
            };
            scope.cancel = function() {
                scope.editMode = false;
                scope.model = previousValue;
                scope.handleCancel({value: scope.model});
            };
        },
        templateUrl: '/partials/employer/inline-edit.html'
    };
});